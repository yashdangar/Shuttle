generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guest {
  id              Int            @id @default(autoincrement())
  email           String?        @unique
  googleId        String?
  firstName       String?
  lastName        String?
  phoneNumber     String?
  arrivalDate     DateTime?
  confirmationNum String?        @unique
  reservationId   String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  hotelId         Int?
  isNonResident   Boolean        @default(false)
  bookings        Booking[]
  hotel           Hotel?         @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  notifications   Notification[]
}

model Location {
  id              Int       @id @default(autoincrement())
  name            String
  latitude        Float
  longitude       Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bookingsDropoff Booking[] @relation("dropoff")
  bookingsPickup  Booking[] @relation("pickup")
}

model Booking {
  id                String        @id @default(uuid())
  guestId           Int
  confirmationNum   String?
  numberOfPersons   Int
  numberOfBags      Int
  pickupLocationId  Int?
  dropoffLocationId Int?
  preferredTime     DateTime?
  paymentMethod     PaymentMethod
  bookingType       BookingType
  isCompleted       Boolean       @default(false)
  isPaid            Boolean       @default(false)
  isCancelled       Boolean       @default(false)
  isRefunded        Boolean       @default(false)
  cancelledBy       CancellationActor?
  cancellationReason String?
  shuttleId         Int?
  tripId            String?
  encryptionKey     String?
  qrCodePath        String?
  isVerified        Boolean       @default(false)
  verifiedAt        DateTime?
  verifiedBy        Int?
  needsFrontdeskVerification Boolean @default(false)
  eta               String?
  trackingEnabled   Boolean       @default(true)
  lastEtaUpdate     DateTime?
  isWaived          Boolean       @default(false)
  waiverReason      String?
  waivedBy          Int?
  waivedAt          DateTime?
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  dropoffLocation   Location?     @relation("dropoff", fields: [dropoffLocationId], references: [id])
  guest             Guest         @relation(fields: [guestId], references: [id], onDelete: Cascade)
  pickupLocation    Location?     @relation("pickup", fields: [pickupLocationId], references: [id])
  shuttle           Shuttle?      @relation(fields: [shuttleId], references: [id])
  trip              Trip?         @relation(fields: [tripId], references: [id])
  verificationToken QRVerificationToken?
  verificationLogs  QRVerificationLog[]
  verifier          Driver?       @relation("BookingVerifier", fields: [verifiedBy], references: [id])
  waiverUser        FrontDesk?    @relation("BookingWaiver", fields: [waivedBy], references: [id])
}

model FrontDesk {
  id            Int            @id @default(autoincrement())
  name          String
  phoneNumber   String
  email         String         @unique
  password      String
  hotelId       Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  hotel         Hotel          @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  notifications Notification[]
  waivedBookings Booking[]     @relation("BookingWaiver")
}

model Admin {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  hotelId       Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  hotel         Hotel?         @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  notifications Notification[]
}

model Driver {
  id            Int            @id @default(autoincrement())
  name          String
  phoneNumber   String
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  hotelId       Int?
  lastLocationUpdate DateTime?
  hotel         Hotel?         @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  notifications Notification[]
  schedules     Schedule[]     @relation("DriverSchedules")
  trips         Trip[]
  verifiedBookings Booking[]   @relation("BookingVerifier")
  verificationLogs QRVerificationLog[]
  currentLocation DriverLocation?
  locationHistory LocationHistory[]
}

model Shuttle {
  id            Int        @id @default(autoincrement())
  hotelId       Int
  vehicleNumber String
  seats         Int
  createdAt     DateTime   @default(now())
  bookings      Booking[]
  schedules     Schedule[] @relation("ShuttleSchedules")
  trips         Trip[]
  hotel         Hotel      @relation(fields: [hotelId], references: [id], onDelete: Cascade)
}

model Schedule {
  id        Int      @id @default(autoincrement())
  driverId  Int
  shuttleId Int
  scheduleDate DateTime @default(now())
  startTime DateTime
  endTime   DateTime
  driver    Driver   @relation("DriverSchedules", fields: [driverId], references: [id], onDelete: Cascade)
  shuttle   Shuttle  @relation("ShuttleSchedules", fields: [shuttleId], references: [id], onDelete: Cascade)
  trips     Trip[]

  @@unique([driverId, scheduleDate])
}

model Notification {
  id          Int        @id @default(autoincrement())
  title       String
  message     String
  isRead      Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  driverId    Int?
  guestId     Int?
  frontDeskId Int?
  adminId     Int?
  admin       Admin?     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  driver      Driver?    @relation(fields: [driverId], references: [id], onDelete: Cascade)
  frontDesk   FrontDesk? @relation(fields: [frontDeskId], references: [id], onDelete: Cascade)
  guest       Guest?     @relation(fields: [guestId], references: [id], onDelete: Cascade)
}

model Hotel {
  id          Int         @id @default(autoincrement())
  name        String
  address     String?
  phoneNumber String?
  email       String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  admins      Admin[]
  drivers     Driver[]
  frontDesks  FrontDesk[]
  guests      Guest[]
  shuttles    Shuttle[]
}

enum PaymentMethod {
  APP
  FRONTDESK
  DEPOSIT
}

enum BookingType {
  HOTEL_TO_AIRPORT
  AIRPORT_TO_HOTEL
}

enum CancellationActor {
  GUEST
  DRIVER
  FRONTDESK
  ADMIN
  SYSTEM
}

enum TripDirection {
  HOTEL_TO_AIRPORT
  AIRPORT_TO_HOTEL
}

enum TripStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum TripPhase {
  OUTBOUND
  RETURN
  COMPLETED
}

model QRVerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  bookingId String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model QRVerificationLog {
  id        Int      @id @default(autoincrement())
  bookingId String
  driverId  Int
  token     String
  success   Boolean
  message   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  driver    Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
}

model DriverLocation {
  id        Int      @id @default(autoincrement())
  driverId  Int      @unique
  latitude  Float
  longitude Float
  accuracy  Float?
  speed     Float?
  heading   Float?
  timestamp DateTime @default(now())
  driver    Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
}

model LocationHistory {
  id        Int      @id @default(autoincrement())
  driverId  Int
  latitude  Float
  longitude Float
  accuracy  Float?
  speed     Float?
  heading   Float?
  timestamp DateTime @default(now())
  driver    Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
}

model Trip {
  id          String      @id @default(uuid())
  scheduleId  Int
  driverId    Int
  shuttleId   Int
  direction   TripDirection
  status      TripStatus  @default(PENDING)
  phase       TripPhase   @default(OUTBOUND)
  startTime   DateTime?
  outboundEndTime DateTime?
  returnStartTime DateTime?
  endTime     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  schedule    Schedule    @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  driver      Driver      @relation(fields: [driverId], references: [id], onDelete: Cascade)
  shuttle     Shuttle     @relation(fields: [shuttleId], references: [id], onDelete: Cascade)
  bookings    Booking[]
}
