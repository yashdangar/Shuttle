generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guest {
  id              Int            @id @default(autoincrement())
  email           String?        @unique
  googleId        String?
  firstName       String?
  lastName        String?
  phoneNumber     String?
  arrivalDate     DateTime? // for login
  confirmationNum String?        @unique
  reservationId   String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  hotelId         Int?
  isNonResident   Boolean        @default(false)
  hotel           Hotel?         @relation(fields: [hotelId], references: [id],onDelete: Cascade)
  bookings        Booking[]
  notifications   Notification[]
}

enum PaymentMethod {
  APP
  FRONTDESK
  DEPOSIT
}

model Location {
  id           Int      @id @default(autoincrement())
  name         String
  latitude     Float
  longitude    Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  bookingsPickup  Booking[]   @relation("pickup")
  bookingsDropoff Booking[]   @relation("dropoff")
}

enum BookingType {
  HOTEL_TO_AIRPORT
  AIRPORT_TO_HOTEL
}

model Booking {
  id                Int           @id @default(autoincrement())
  guestId           Int
  numberOfPersons   Int
  numberOfBags      Int
  pickupLocation    Location?     @relation(fields: [pickupLocationId], references: [id], name: "pickup")
  pickupLocationId  Int?
  dropoffLocation   Location?     @relation(fields: [dropoffLocationId], references: [id], name: "dropoff")
  dropoffLocationId Int?
  preferredTime     DateTime?
  paymentMethod     PaymentMethod
  bookingType          BookingType
  isCompleted       Boolean       @default(false)
  isPaid            Boolean       @default(false)
  isCancelled       Boolean       @default(false)
  isRefunded        Boolean       @default(false)
  shuttleId         Int?
  shuttle           Shuttle?      @relation(fields: [shuttleId], references: [id])
  guest             Guest         @relation(fields: [guestId], references: [id])
  encryptionKey     String?
  qrCodePath        String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model FrontDesk {
  id            Int            @id @default(autoincrement())
  name          String
  phoneNumber   String
  email         String         @unique
  password      String
  hotelId       Int
  hotel         Hotel          @relation(fields: [hotelId], references: [id],onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
}

model Admin {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  hotelId       Int?
  hotel         Hotel?         @relation(fields: [hotelId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
}

model Driver {
  id            Int            @id @default(autoincrement())
  name          String
  phoneNumber   String
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
  schedules     Schedule[]     @relation("DriverSchedules")
  hotel         Hotel?         @relation(fields: [hotelId], references: [id])
  hotelId       Int?
}

model Shuttle {
  id            Int      @id @default(autoincrement())
  hotelId       Int
  vehicleNumber String
  seats         Int
  createdAt     DateTime @default(now())
  hotel         Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  schedules     Schedule[] @relation("ShuttleSchedules")
  bookings      Booking[]
}

model Schedule {
  id        Int      @id @default(autoincrement())
  driverId  Int
  shuttleId Int
  startTime DateTime
  endTime   DateTime
  driver    Driver   @relation("DriverSchedules", fields: [driverId], references: [id])
  shuttle   Shuttle  @relation("ShuttleSchedules", fields: [shuttleId], references: [id])

  @@unique([driverId, startTime]) // Ensure a driver cannot have overlapping schedules
}

model Notification {
  id          Int        @id @default(autoincrement())
  title       String
  message     String
  isRead      Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  driverId    Int?
  driver      Driver?    @relation(fields: [driverId], references: [id])
  guestId     Int?
  guest       Guest?     @relation(fields: [guestId], references: [id])
  frontDeskId Int?
  frontDesk   FrontDesk? @relation(fields: [frontDeskId], references: [id])
  adminId     Int?
  admin       Admin?     @relation(fields: [adminId], references: [id])
}

model Hotel {
  id         Int         @id @default(autoincrement())
  name       String
  address    String?
  phoneNumber String?
  email      String?
  
  latitude   Float?
  longitude  Float?
  shuttles   Shuttle[] 
  guests     Guest[]
  frontDesks FrontDesk[]
  admins     Admin[]
  drivers    Driver[]

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

